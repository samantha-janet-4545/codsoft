import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Contact class
class Contact implements Serializable {
    private static final long serialVersionUID = 1L;

    private String name;
    private String phoneNumber;
    private String emailAddress;

    // Constructor
    public Contact(String name, String phoneNumber, String emailAddress) {
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.emailAddress = emailAddress;
    }

    // Getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    // Override toString method for printing
    @Override
    public String toString() {
        return "Contact{" +
                "name='" + name + '\'' +
                ", phoneNumber='" + phoneNumber + '\'' +
                ", emailAddress='" + emailAddress + '\'' +
                '}';
    }
}

// AddressBook class
class AddressBook implements Serializable {
    private static final long serialVersionUID = 1L;

    private List<Contact> contacts;

    // Constructor
    public AddressBook() {
        this.contacts = new ArrayList<>();
    }

    // Method to add a contact
    public void addContact(Contact contact) {
        contacts.add(contact);
    }

    // Method to remove a contact by name
    public void removeContact(String name) {
        contacts.removeIf(contact -> contact.getName().equalsIgnoreCase(name));
    }

    // Method to search for a contact by name
    public Contact searchContact(String name) {
        for (Contact contact : contacts) {
            if (contact.getName().equalsIgnoreCase(name)) {
                return contact;
            }
        }
        return null; // Return null if contact not found
    }

    // Method to display all contacts
    public void displayAllContacts() {
        for (Contact contact : contacts) {
            System.out.println(contact);
        }
    }

    // Method to save contact data to a file
    public void saveToFile(String filename) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(contacts);
            System.out.println("Contact data saved to " + filename);
        } catch (IOException e) {
            System.out.println("Error saving contact data: " + e.getMessage());
        }
    }

    // Method to load contact data from a file
    public void loadFromFile(String filename) {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            contacts = (List<Contact>) ois.readObject();
            System.out.println("Contact data loaded from " + filename);
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error loading contact data: " + e.getMessage());
        }
    }
}

// AddressBookUI class
public class AddressBookUI {
    private static Scanner scanner = new Scanner(System.in);
    private static AddressBook addressBook = new AddressBook();

    public static void main(String[] args) {
        boolean exit = false;
        while (!exit) {
            displayMenu();
            int choice = getUserChoice();

            switch (choice) {
                case 1:
                    addContact();
                    break;
                case 2:
                    removeContact();
                    break;
                case 3:
                    searchContact();
                    break;
                case 4:
                    displayAllContacts();
                    break;
                case 5:
                    saveToFile();
                    break;
                case 6:
                    loadFromFile();
                    break;
                case 7:
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
        System.out.println("Thank you for using the Address Book System.");
    }

    // Method to display Address Book menu
    private static void displayMenu() {
        System.out.println("\nAddress Book Menu:");
        System.out.println("1. Add a new contact");
        System.out.println("2. Remove a contact");
        System.out.println("3. Search for a contact");
        System.out.println("4. Display all contacts");
        System.out.println("5. Save contact data to file");
        System.out.println("6. Load contact data from file");
        System.out.println("7. Exit");
        System.out.print("Enter your choice: ");
    }

    // Method to get user choice
    private static int getUserChoice() {
        return scanner.nextInt();
    }

    // Method to add a new contact
    private static void addContact() {
        scanner.nextLine(); // Consume newline left after nextInt()
        System.out.print("Enter contact name: ");
        String name = scanner.nextLine().trim();
        if (name.isEmpty()) {
            System.out.println("Name cannot be empty. Aborting contact addition.");
            return;
        }

        System.out.print("Enter phone number: ");
        String phoneNumber = scanner.nextLine().trim();

        System.out.print("Enter email address: ");
        String emailAddress = scanner.nextLine().trim();

        Contact contact = new Contact(name, phoneNumber, emailAddress);
        addressBook.addContact(contact);
        System.out.println("Contact added successfully.");
    }

    // Method to remove a contact
    private static void removeContact() {
        scanner.nextLine(); // Consume newline left after nextInt()
        System.out.print("Enter contact name to remove: ");
        String name = scanner.nextLine().trim();
        addressBook.removeContact(name);
        System.out.println("Contact removed successfully.");
    }

    // Method to search for a contact
    private static void searchContact() {
        scanner.nextLine(); // Consume newline left after nextInt()
        System.out.print("Enter contact name to search: ");
        String name = scanner.nextLine().trim();
        Contact contact = addressBook.searchContact(name);
        if (contact != null) {
            System.out.println("Contact found: " + contact);
        } else {
            System.out.println("Contact not found.");
        }
    }

    // Method to display all contacts
    private static void displayAllContacts() {
        addressBook.displayAllContacts();
    }

    // Method to save contact data to a file
    private static void saveToFile() {
        scanner.nextLine(); // Consume newline left after nextInt()
        System.out.print("Enter file name to save contact data: ");
        String filename = scanner.nextLine().trim();
        addressBook.saveToFile(filename);
    }

    // Method to load contact data from a file
    private static void loadFromFile() {
        scanner.nextLine(); // Consume newline left after nextInt()
        System.out.print("Enter file name to load contact data: ");
        String filename = scanner.nextLine().trim();
        addressBook.loadFromFile(filename);
    }
}
